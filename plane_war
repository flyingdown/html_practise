<!DOCTYPE html>
<html>
<head>
	<title></title>
	<script type="text/javascript">
	function init() {
		/* 定义宽和高 */
		var WIDTH=480, HEIGHT=620;

		/* 定义状态 */
		var START = 0;
		var STARTING = 1;
		var RUNNING = 2;
		var PAUSE = 3;
		var GAMEOVER = 4;

		/* 分数 */
		var socre = 0;
		/* 生命 */
		var life = 3;

		/* 初始状态 */
		var state = START;

		/* 定义资源 */
		/* 背景图片 */
		var bg = new Image();
		bg.src = "img/background.png";

		/* 版权图片 */
		var copy_right = new Image();
		copy_right.src = "img/shoot_copyright.png"

		/* 游戏加载图片 */
		var load_config = [];
		for ( var i = 0; i < 4; ++i )
		{
			load_config[i] = new Image();
			load_config[i].src = "img/game_loading"+(i+1)+".png";
		}

		/* 英雄飞机图片 */
		var hero_config = [];
		for ( var i = 0; i < 6; ++i )
		{
			hero_config[i] = new Image();
			if ( i < 2 )
			{
				hero_config[i].src = "img/hero"+(i+1)+".png";
			}else
			{
				hero_config[i].src = "img/hero_blowup_n"+(i-1)+".png";
			}
		}

		/* 敌机－－小飞机图片 */
		var enemy_small = [];
		for ( var i = 0; i < 5; ++i )
		{
			enemy_small[i] = new Image ();
			if ( i == 0 )
				enemy_small[i].src = "img/enemy1.png"
			else
				enemy_small[i].src = "img/enemy1_down" + i + ".png";
		}

		/* 敌机－－中等飞机图片 */
		var enemy_medium = [];
		for ( var i = 0; i < 6; ++i )
		{
			enemy_medium[i] = new Image ();
			if ( i == 0 )
				enemy_medium[i].src = "img/enemy2.png"
			else if ( i < 4 )
				enemy_medium[i].src = "img/enemy2_down" + i + ".png";
			else
				enemy_medium[i].src = "img/enemy2_hit.png";
		}

		/* 敌机－－大飞机图片 */
		var enemy_big = [];
		for ( var i = 0; i < 8; ++i )
		{
			enemy_big[i] = new Image ();
			if ( i < 2 )
				enemy_big[i].src = "img/enemy3_n"+ (i+1)+".png"
			else if ( i < 7 )
				enemy_big[i].src = "img/enemy3_down" + (i-1) + ".png";
			else
				enemy_big[i].src = "img/enemy3_hit.png";
		}



		/* 子弹图片 */
		var bullet_img = new Image ();
		bullet_img.src = "img/bullet1.png";

		/* 暂停图片 */
		var pause_img = [ new Image (), new Image () ];
		pause_img[0].src = "img/game_pause_nor.png";
		pause_img[1].src = "img/game_pause_pressed.png";


		/* 绘画对象 */
		var canvas = document.querySelector ( "canvas");
		var ctx = canvas.getContext ('2d');

		/* 配置数据对象 */

		var ENEMY_SMALL = {
			frames : enemy_small,
			width : 57,
			height : 51,
			speed : 50,
			type : 1,
			score : 100,
			maxSpeed : 70,
			minSpeed : 50
		}

		var ENEMY_MEDIUM = {
			frames : enemy_medium,
			width : 69,
			height : 95,
			speed : 50,
			type : 2,
			score : 200,
			maxSpeed : 70,
			minSpeed : 50
		}

		var ENEMY_BIG = {
			frames : enemy_big,
			width : 165,
			height : 261,
			speed : 100,
			type : 3,
			score : 500,
			maxSpeed : 100,
			minSpeed : 100

		}

		var BULLET = {
			frame : bullet_img ,
			width : 9,
			height : 21,
			speed : 100
		}

		var HERO = {
			frames : hero_config,
			width : 99,
			height : 124,
			x : ( WIDTH - 99 ) / 2,
			y : ( HEIGHT - 124 ) / 2 + 90,
			speed : 50,
			base : 2
		}


		var LOADING = {
			frames : load_config,
			width : 186,
			height : 38,
			x : 0,
			y : HEIGHT - 38,
			speed : 10
		}

		var SKY = {
			image : bg,
			width:480,
			height : 620,
			speed : 20
		}



		/* 逻辑对象 */
		var sky = new Sky(SKY);
		var loader = new loading ( LOADING );
		var hero = new Hero ( HERO );

		/* enemy_smallers = [];
		var enemy_small_interval = 1000;
		var last_gen_small = new Date().getTime();

		enemy_mediumers = [];
		var enemy_medium_interval = 5500;
		var last_gen_medium = new Date().getTime();

		var enemy_biggers = [];
		var enemy_big_interval = 15500;
		var last_gen_big = new Date().getTime();

		function enemy_genration ()
		{
			if ( new Date().getTime() - last_gen_small > enemy_small_interval )
			{
				if ( state == RUNNING )
				{
					enemy_smallers.push ( new Enemy_small ( ENEMY_SMALL ) );
					last_gen_small = new Date().getTime();
				}
			}

			if ( new Date().getTime() - last_gen_medium > enemy_medium_interval )
			{
				if ( state == RUNNING )
				{
					enemy_mediumers.push ( new Enemy_medium ( ENEMY_MEDIUM ) );
					last_gen_medium = new Date().getTime();
				}
			}

			if ( new Date().getTime() - last_gen_big > enemy_big_interval )
			{
				if ( state == RUNNING )
				{
					enemy_biggers.push ( new Enemy_big ( ENEMY_BIG ) );
					last_gen_big = new Date().getTime();
				}
			}

			for ( var i = 0; i < enemy_smallers.length; ++i )
			{
				if ( enemy_smallers[i].y > HEIGHT )
					enemy_smallers.splice ( i, 1 );

				enemy_smallers[i].step();
				enemy_smallers[i].move();
				enemy_smallers[i].paint(ctx);
			}

			for ( var i = 0; i < enemy_mediumers.length; ++i )
			{
				if ( enemy_mediumers[i].y > HEIGHT )
					enemy_mediumers.splice ( i, 1 );

				enemy_mediumers[i].step();
				enemy_mediumers[i].move();
				enemy_mediumers[i].paint(ctx);
			}

			for ( var i = 0; i < enemy_biggers.length; ++i )
			{
				if ( enemy_biggers[i].y > HEIGHT )
					enemy_biggers.splice ( i, 1 );

				enemy_biggers[i].move();
				enemy_biggers[i].paint(ctx);
			}
		} */
		var enemy = [];
		var enemy_interval = 1000;
		var last_gen_time = new Date().getTime();
		var random_num;

		function enemy_genration () {
			if ( new Date().getTime() - last_gen_time > enemy_interval )
			{
				if ( state == RUNNING )
				{
					random_num = Math.floor ( Math.random () * 10 );
					if ( random_num < 7 )
					{
						enemy.push ( new Enemy ( ENEMY_SMALL ) );
					}else if ( random_num < 9 )
					{
						enemy.push ( new Enemy ( ENEMY_MEDIUM ) );
					}else
					{
						if ( enemy[0].type != 3 )
						{
							enemy.splice ( 0, 0, new Enemy ( ENEMY_BIG ) );
						}
					}
					last_gen_time = new Date().getTime();
				}

			}

			for ( var i = 0; i < enemy.length; ++i )
			{
				enemy[i].move ();
				enemy[i].paint ( ctx );

				if ( enemy[i].y > HEIGHT )
					enemy.splice ( i, 1 );
			}

			console.log ( enemy.length );
		}


		/* 为canvas添加事件 */
		canvas.onclick = function () {
			if ( state == START )
			{
				state = STARTING;
			}
		}

		canvas.onmousemove = function ( event ) {
			if ( state == RUNNING )
			{
				// console.log ( event.offsetX + ":" + event.offsetY );
				hero.x = event.offsetX - 99 / 2;
				hero.y = event.offsetY - 124 /2 ;
			}
		}

		canvas.onmouseout = function ( event ) {
			state = PAUSE;
		}

		canvas.onmouseenter = function () {
			if ( state == PAUSE )
				state = RUNNING;
		}

		/* 分数 生命 */
		function SocreAndLife (ctx) {
			ctx.font = "20px 微软雅黑";
			ctx.fillText ( "SOCRE : " + socre, 10, 20 );
			ctx.fillText ( "LIFE : " + life, 400, 20 );
		}

		function Enemy ( config ) {
			this.frames = config.frames;
			this.frame = this.frames[0];
			this.width = config.width;
			this.height = config.height;
			this.type = config.type;
			this.last_move_time = new Date().getTime();
			this.x = Math.ceil ( Math.random () * ( WIDTH - this.width ) );
			this.y = -this.height;
			this.frame_index = 0;
			this.last_frame_time = new Date().getTime();
			this.frame_interval = 100;
			this.maxSpeed = config.maxSpeed;
			this.minSpeed = config.minSpeed;
			this.speed = config.speed;
			if ( this.type == 3 )
				this.speed = Math.ceil ( Math.random() * ( this.maxSpeed - this.minSpeed ) ) + this.minSpeed;

			this.step = function () {
				if ( new Date().getTime() - this.last_frame_time < this.frame_interval )
					return ;
				if ( this.type != 3 )
					this.frame = this.frames[0];
				else
					this.frame = this.frames[this.frame_index++ % 2];

				this.last_frame_time = new Date().getTime();
			}

			this.move = function () {
				this.step();

				if ( state != RUNNING )
					return;

				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;

				this.y += 2;

				this.last_move_time = new Date().getTime();
			}

			this.paint = function ( ctx ) {
				// console.log (this.x + ":" + this.y);
				// console.log ( "start :" + this.type );
				ctx.drawImage ( this.frame, this.x, this.y );
				// console.log ( "end :" + this.type );
			}
			// hero_bullet.x-hero.bullet.width/2, hero_bullet.y-hero_bullet.height/2
			// this.x-hero.bullet.width/2 -- this.x+this.width+hero_bullet.width/2
			// this.y-hero.bullet.height/2 -- this.y+this.height+hero_bullet.height/2
			this.hit = function ( hero_bullet ) {
				if ( hero_bullet.x - hero_bullet.width / 2 > this.x - hero_bullet.width / 2
					&& hero_bullet.x - hero_bullet.width / 2 < this.x + this.width + hero_bullet.width / 2
					&& hero_bullet.y-hero_bullet.height/2 > this.y - hero.bullet.height / 2
					&& hero_bullet.y-hero_bullet.height/2 < this.y+this.height+hero_bullet.height/2 )
					return true;
				else
					return false;
			}
		}

		/* 敌机－－大飞机业务对象
		function Enemy_big ( config ) {
			this.frames = config.frames;
			this.width = config.width;
			this.height = config.height;
			this.speed = config.speed;
			this.last_move_time = new Date().getTime();
			this.x = Math.ceil ( Math.random () * ( WIDTH - this.width ) );
			this.y = 0;
			this.frame_index = 0;
			this.last_frame_time = new Date().getTime();
			this.frame_interval = 100;

			this.step = function () {
				if ( new Date().getTime() - this.last_frame_time < this.frame_interval )
					return ;

				this.frame = this.frames[this.frame_index++ % 2];

				this.last_frame_time = new Date().getTime();
			}

			this.move = function () {
				this.step();

				if ( state != RUNNING )
					return;

				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;

				this.y += 2;

				this.last_move_time = new Date().getTime();
			}

			this.paint = function ( ctx ) {
				// console.log (this.x + ":" + this.y);
				ctx.drawImage ( this.frame, this.x, this.y );
			}
		} */

		/* 敌机－－中等飞机业务对象
		function Enemy_medium ( config ) {
			this.frames = config.frames;
			this.width = config.width;
			this.height = config.height;
			this.speed = config.speed;
			this.last_move_time = new Date().getTime();
			this.x = Math.ceil ( Math.random () * ( WIDTH - this.width ) );
			this.y = 0;

			this.step = function () {
				this.frame = this.frames[0];
			}

			this.move = function () {
				if ( state != RUNNING )
					return;

				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;

				this.y += 2;

				this.last_move_time = new Date().getTime();
			}

			this.paint = function ( ctx ) {
				// console.log (this.x + ":" + this.y);
				ctx.drawImage ( this.frame, this.x, this.y );
			}
		} */

		/* 敌机－－小飞机业务对象
		function Enemy_small ( config ) {
			this.frames = config.frames;
			this.width = config.width;
			this.height = config.height;
			this.speed = config.speed;
			this.last_move_time = new Date().getTime();
			this.x = Math.ceil ( Math.random () * ( WIDTH - this.width ) );
			this.y = 0;

			this.step = function () {
				this.frame = this.frames[0];
			}

			this.move = function () {
				if ( state != RUNNING )
					return;

				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;

				this.y += 2;

				this.last_move_time = new Date().getTime();
			}

			this.paint = function ( ctx ) {
				// console.log (this.x + ":" + this.y);
				ctx.drawImage ( this.frame, this.x, this.y );
			}
		} */

		/* 子弹模板 */
		function Bullet ( config, x, y ) {
			this.frame = config.frame;
			this.x = x;
			this.y = y - config.height;
			this.width = config.width;
			this.height = config.height;

			this.move = function () {
				this.y -= 2;
			}

			this.paint = function (ctx) {
				// console.log ( this.frame );
				ctx.drawImage ( this.frame, this.x, this.y );
			}

		}


		/* 英雄模板 */
		function Hero ( config ) {
			this.speed = 1000 / config.speed;
			this.last_move_time = new Date().getTime();
			this.frame_index = 0;
			this.x = ( WIDTH - 99 ) / 2;
			this.y = ( HEIGHT - 124 ) / 2 + 90;
			this.shootInterval = 200;
			this.shoot_last_time = new Date().getTime();
			this.bullets = [];

			this.step = function () {
				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;
				this.frame = config.frames[this.frame_index++ % config.base];
				//console.log ( this.frame_index++ % config.base );
				this.last_move_time = new Date().getTime();
			}

			this.paint = function ( ctx ) {
				ctx.drawImage ( this.frame, this.x, this.y );
			}

			/* 发射子弹 */
			this.shoot = function () {
				for ( var i = 0; i < this.bullets.length; ++i )
				{
					if ( this.bullets[i].y < 0 )
					{
						this.bullets.splice ( i, 1 );
					}else
					{
						if ( state == RUNNING )
						{
							this.bullets[i].move();
						}

						this.bullets[i].paint ( ctx );
					}
				}

				if ( new Date().getTime() - this.shoot_last_time < this.shootInterval )
					return;
				// console.log ( BULLET.bullet_img );
				this.bullets.push ( new Bullet ( BULLET, this.x + config.width / 2, this.y ) );

				this.shoot_last_time = new Date().getTime();

			}
		}

		/* 游戏加载动画模板 */
		function loading ( config ) {
			this.speed = 1000 / config.speed;
			this.last_move_time = new Date().getTime();
			this.frame_index = 0;
			/* 更换laoding图像 */
			this.step = function () {
				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;

				this.frame = config.frames[this.frame_index++];
				// console.log ( this.frame_index );
				if ( this.frame_index >= 4 )
				{
					state = RUNNING;
				}

				this.last_move_time = new Date().getTime();
			}

			this.paint = function (ctx) {
				ctx.drawImage ( this.frame, config.x, config.y );
			}
		}

		/* 背景模版 */
		function Sky ( config ) {
			/* 数据 */
			this.bg = config.image;
			this.width = config.width;
			this.height = config.height;
			this.speed = 1000 / config.speed;

			this.x1 = this.x2 = 0;
			this.y1 = -1*HEIGHT;
			this.y2 = 0;

			this.last_move_time = new Date().getTime();
			/* 天空移动 */
			this.step = function (){
				if ( new Date().getTime() - this.last_move_time < this.speed )
					return;
				this.y1 = ( this.y1 >= HEIGHT ? -853 : ++this.y1 );
				this.y2 = ( this.y2 >= HEIGHT ? -853 : ++this.y2 );
				this.last_move_time = new Date().getTime();
			}
			/* 绘制天空 */
			this.paint = function ( ctx ) {
				ctx.drawImage ( this.bg, this.x1, this.y1);
				ctx.drawImage ( this.bg, this.x2, this.y2);
			}


		}

		setInterval ( function () {
			switch ( state )
			{
				case START :
					// 游戏背景
					sky.step();
					sky.paint(ctx);
					// 版权绘制
					var copy_right_x = (WIDTH-copy_right.naturalWidth)/2;
					var copy_right_y = (HEIGHT-copy_right.naturalHeight)/2;

					// console.log (copy_right_x + ":" + copy_right_y);
					ctx.drawImage(copy_right, copy_right_x, copy_right_y);
					break;
				case STARTING :
					// 游戏背景
					sky.step();
					sky.paint(ctx);
					loader.step();
					loader.paint(ctx);
					break;
				case RUNNING :
					// 游戏背景
					sky.step();
					sky.paint(ctx);

					// 分数
					SocreAndLife ( ctx );

					hero.step();
					hero.paint(ctx);
					hero.shoot();

					enemy_genration ();

					break;
				case PAUSE :
					// 游戏背景
					sky.step();
					sky.paint(ctx);
					// 分数
					SocreAndLife ( ctx );
					hero.step();
					hero.paint(ctx);
					hero.shoot();
					ctx.drawImage ( pause_img[0], WIDTH / 2 , HEIGHT / 2 );
					enemy_genration ();
					break;
				case GAMEOVER :
					// 游戏背景
					sky.step();
					sky.paint(ctx);
					break;

			}
		}, 10);
	}

	window.addEventListener("load",init,false);
	</script>
</head>
<body>
<div style="width : 480px; height : 620px; margin: 0 auto">
<canvas width = "480" height = "620" >

</canvas>
</div>
</body>
</html>
